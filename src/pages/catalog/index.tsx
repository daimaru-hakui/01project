/* eslint-disable @next/next/no-img-element */
import { useState, useEffect } from "react";
import {
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
} from "@material-ui/core";
import ClearIcon from "@material-ui/icons/Clear";
import CatalogCard from "../../components/CatalogCard/CatalogCard";
import Styles from "./index.module.scss";
import Head from "next/head";
import TopicsArea from "components/TopicsArea/TopicsArea";

const Catalog: React.FC<Props> = (props) => {
  const { apiData, listCategory, listCompany } = props;

  //オブジェクトにkanaを追加
  useEffect(() => {
    apiData.map((value: any) => {
      return listCompany.map((v: any) => {
        if (value.maker == v.maker) {
          return (value.kana = v.kana);
        }
      });
    });
    apiData.sort((a: any, b: any) => {
      if (a.kana > b.kana) {
        return 1;
      } else {
        return -1;
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const [catalogs, setCatalogs] = useState(apiData);
  const [seasonList, setSeasonList] = useState([]);
  const [makerList, setMakerList] = useState([]);
  const [categoryValue, setCategoryValue] = useState("");
  const [seasonValue, setSeasonValue] = useState("");
  const [makerValue, setMakerValue] = useState("");
  //seasonの重複を削除
  useEffect(() => {
    const seasonData = catalogs.map((value) => {
      return value.season[0];
    });
    const newData: any = seasonData.filter((value, index, self) => {
      if (self.indexOf(value) == index) return value;
    });
    setSeasonList(newData);
  }, [catalogs]);

  //makerの重複を削除
  useEffect(() => {
    const makerData = catalogs.map((value) => {
      return value.maker;
    });
    const newData: any = makerData.filter((value, index, self) => {
      if (self.indexOf(value) == index) return value;
    });
    setMakerList(newData);
  }, [catalogs]);

  const onChangeCategory = (e: any) => {
    e.preventDefault();
    setCategoryValue(e.target.value);

    let prevCatalogs = apiData.filter((catalog) => {
      if (catalog.season.includes(seasonValue) || seasonValue == "") {
        return catalog;
      }
    });

    prevCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.maker.includes(makerValue) || makerValue == "") {
        return catalog;
      }
    });

    let newCatalogs = prevCatalogs.filter((catalog) => {
      if (e.target.value === "") return catalog;
      return catalog.category.includes(e.target.value);
    });
    setCatalogs(newCatalogs);
  };

  const onChangeSeason = (e: any) => {
    e.preventDefault();
    setSeasonValue(e.target.value);

    let prevCatalogs = apiData.filter((catalog) => {
      if (catalog.category.includes(categoryValue) || categoryValue == "")
        return catalog;
    });

    prevCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.maker.includes(makerValue) || makerValue == "")
        return catalog;
    });

    let newCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.season.includes(e.target.value) || e.target.value === "") {
        return catalog;
      }
    });
    setCatalogs(newCatalogs);
  };

  const onChangeMaker = (e: any) => {
    e.preventDefault();
    setMakerValue(e.target.value);

    let prevCatalogs = apiData.filter((catalog) => {
      if (catalog.category.includes(categoryValue) || categoryValue == "")
        return catalog;
    });

    prevCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.season.includes(seasonValue) || seasonValue == "")
        return catalog;
    });

    let newCatalogs = prevCatalogs.filter((catalog) => {
      if (catalog.maker.includes(e.target.value) || e.target.value == "")
        return catalog;
    });
    setCatalogs(newCatalogs);
  };

  const onClickReset = () => {
    setCatalogs(apiData);
    setCategoryValue("");
    setSeasonValue("");
    setMakerValue("");
  };

  return (
    <>
      <Head>
        <title>デジタルカタログ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`p-10 flex flex-col items-strach lg:mt-6 lg:flex-row lg:justify-center`}
      >
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-category-label"
              aria-labelledby="select category"
            >
              Category
            </InputLabel>
            <Select
              labelId="demo-simple-select-category-label"
              id="demo-simple-select-outlined"
              value={categoryValue}
              onChange={onChangeCategory}
              label="category"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {listCategory.map((value) => (
                <MenuItem key={value.id} value={value.key}>
                  {value.value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-season-label"
              aria-labelledby="select season"
            >
              Season
            </InputLabel>
            <Select
              labelId="demo-simple-select-season-label"
              id="demo-simple-select-outlined"
              value={seasonValue}
              onChange={onChangeSeason}
              label="season"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {seasonList.map((value, index) => (
                <MenuItem key={index} value={value}>
                  {value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
        <div className={`${Styles.formArea}`}>
          <FormControl variant="outlined" className={`w-full lg:w-56`}>
            <InputLabel
              id="demo-simple-select-maker-label"
              aria-labelledby="select maker"
            >
              maker
            </InputLabel>
            <Select
              labelId="demo-simple-select-maker-label"
              id="demo-simple-select-maker"
              value={makerValue}
              onChange={onChangeMaker}
              label="maker"
            >
              <MenuItem value="">
                <em>-- 全て選択 --</em>
              </MenuItem>
              {makerList.map((value, index) => (
                <MenuItem key={index} value={value}>
                  {value}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>

        <Button
          variant="contained"
          color="secondary"
          startIcon={<ClearIcon />}
          onClick={onClickReset}
          aria-label="reset button"
        >
          Reset
        </Button>
      </div>

      <section
        className={`${Styles.container} flex flex-wrap justify-center mx-auto`}
      >
        <CatalogCard catalogs={catalogs} />
      </section>
    </>
  );
};
export default Catalog;

//microCMSからデータ取得
export async function getStaticProps() {
  const url = "https://daimaru-hakui.microcms.io/api/v1";
  const apiKey: string = "3c62454d-9a98-4e3d-aee1-d337c3bbdf7e";
  const params = {
    headers: {
      "X-API-KEY": apiKey,
    },
  };
  const [resCatalogs, resCategoryLists, resCompany] = await Promise.all([
    await fetch(`${url}/catalog?limit=250`, params),
    await fetch(`${url}/catalog-category?limit=50`, params),
    await fetch(`${url}/company?limit=100`, params),
  ]);

  const dataCatalogs = await resCatalogs.json();
  const dataCategoryLists = await resCategoryLists.json();
  const dataCompanyLists = await resCompany.json();
  if (!dataCatalogs) return { notFound: true };
  if (!dataCategoryLists) return { notFound: true };
  if (!dataCompanyLists) return { notFound: true };

  let apiData = dataCatalogs.contents.filter((content: any) => {
    return content.transaction === true;
  });
  let listCompany = dataCompanyLists.contents;

  // apiData.forEach((value: any) => {
  //   apiData = listCompany.map((v: any) => {
  //     if (value.maker == v.maker) {
  //       return (value.kana = v.kana || null);
  //     } else {
  //       return value;
  //     }
  //   });
  // });

  apiData = apiData.sort((a: any, b: any) => {
    if (a.kana > b.kana) {
      return 1;
    } else {
      return -1;
    }
  });

  let listCategory = dataCategoryLists.contents;

  return {
    props: { apiData, listCategory, listCompany },
  };
}

type Props = {
  apiData: {
    id: string;
    createdAt: string;
    updatedAt: string;
    publishedAt: string;
    maker: string;
    title: string;
    year: string;
    category: Array<string>;
    season: Array<string>;
    link: string;
    image: {
      url: string;
      height: number;
      width: number;
    };
    kana: string;
    transaction: boolean;
  }[];
  listCategory: {
    id: string;
    createdAt: string;
    updatedAt: string;
    publishedAt: string;
    key: string;
    value: string;
  }[];

  listCompany: {
    id: string;
    createdAt: string;
    updatedAt: string;
    publishedAt: string;
    revisedAt: string;
    maker: string;
    kana: string;
    link: string;
  }[];
};
